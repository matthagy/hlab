

from hlab.bases import AutoRepr
from hlab.xlagebra import 

def gcf(a, b=0):
    while b!=0:
        a,b = b, a - b*(a//b)
    return a

class Ratio(AutoRepr, A.AlgebraBase):

    def __init__(num, den=None):
        if den is None:
            den = 1
        assert isinstance(num, (int,long))
        assert isinstance(den, (int,long))
        self.num = num
        self.den = den

    def repr_args(self):
        return (self.num, self.den) if self.den != 1 else (self.num,)

    def __str__(self):
        return '%d/%d' % (self.num, self.den)

    def normalized(self):
        f = gcf(self.num, self.den)
        if f==1:
            return self
        return self.__class__(self.num // f, self.den // f)

    
