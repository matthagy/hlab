;; Writes Python bytecode for evaluating statically compiled polynomials

(import 
 from hlab.xbrooke bimport)

(setq bdomain (bimport "domain"))

(defun compile_to_function (poly &keys (check_domain t))
  (x!bompile `(lambda (x)
                ,(make_evaluation_forms poly check_domain))))

(defun make_evaluation_forms (poly &keys (check_domain t))
  `(progn 
     ,(when check_domain
         (make_domain_checker_form poly))
     ,(make_poly_eval_form poly)))

(defun make_domain_checker_form (poly)
  `(unless 
      ,(bdomain.make_checker_forms poly.domain 'x)
      (raise1 (,ValueError
                  (modulo "%s not in domain %s"
                        (,tuple (,clist x ,(str poly.domain))))))))

(defun make_poly_eval_form (poly)
  (let (acc)
    (for ((n A) (poly.terms.iteritems) acc)
      (when A
        (let ((term (if n
                        `(multiply ,A 
                                   ,(cond 
                                     ((eq n 1) 'x)
                                     ;; multiplication isn't faster than power with Python
                                     ;; overhead, but may avoid an additional constant in
                                     ;; function object
                                     ((eq n 2) '(multiply x x))
                                     (t        `(power x ,n))))
                        A)))
          (setq acc (if acc
                       `(add ,acc ,term)
                       term)))))))




