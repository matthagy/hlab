(defun make_poly_eval_form (poly)
  (let (acc)
    (for ((n A) (poly.terms.iteritems) acc)
      (when A
        (let ((term (if n
                        `(multiply ,A 
                                   ,(cond 
                                     ((eq n 1) 'x)
                                     ;; multiplication isn't faster than power with Python
                                     ;; overhead, but may avoid an additional constant in
                                     ;; function object
                                     ((eq n 2) '(multiply x x))
                                     (t        `(power x ,n))))
                        A)))
          (ass acc (if acc
                       `(add ,acc ,term)
                       term)))))))


(%ass make_poly_eval_form 
 (%function 
  "make_poly_eval_form" 
  nil 
  (poly) nil 
  nil nil 
  (%progn 
   (%let (acc) 
    (%let ((#:iter292 (%get-iter ((%attr (%attr poly terms) iteritems))))
           #:destruct-sym295) 
     (%tagbody 
      #:lbl-loop293 
      (%foriter #:destruct-sym295 #:iter292 #:lbl-endloop294) 
      (%let ((#:form-sym296 #:destruct-sym295) n A) 
       (%unpack #:form-sym296 n A) 
       (%progn 
        (%progn 
         (%if A 
          (%progn 
           (%let ((term (%if n 
                         (backq-list* 
                          (%quote multiply) 
                          A 
                          (backq-list 
                           (%if (%== n 1) 
                            (%progn 
                             (%quote x))
                            (%if 
                             (%== n 2) 
                             (%progn 
                              (%quote (%multiply x x)))
                             (%if True 
                              (%progn 
                               (backq-list* 
                                (%quote power) 
                                (%quote x) 
                                (backq-list n)))
                              nil)))))
                         A)))
              (%ass acc (%if acc 
                             (backq-list* 
                              (%quote add) 
                              acc 
                              (backq-list term))
                             term))))
          nil))))
      (%goto #:lbl-loop293) 
      #:lbl-endloop294) 
     (%progn acc))))))

(function
 'make_poly_eval_form'
 None
 [VarBinding(L_LOC NameTranslation(0x2cdf 'poly' 'poly'))]
 {}
 None
 None
 (progn
  (assign
   (var VarBinding(L_LOC NameTranslation(0x2d25 'acc' None)))
   (constant nil))
  (progn
   (assign
    (var VarBinding(L_LOC NameTranslation(0x2d26 '#:iter287' None)))
    (unop
     GET_ITER
     ('call'
      (attribute
       'iteritems'
       (attribute
        'terms'
        (var VarBinding(L_LOC NameTranslation(0x2d27 'poly' None)))))
      []
      {}
      None
      None)))
   (assign
    (var
     VarBinding(L_LOC NameTranslation(0x2d28 '#:destruct-sym290' None)))
    (constant nil))
   (tagbody
    (tag L93 (progn))
    (tag
     L94
     (progn
      (foriter
       (var
        VarBinding(L_LOC NameTranslation(0x2cea '#:destruct-sym290' '#:destruct-sym290')))
       (var
        VarBinding(L_LOC NameTranslation(0x2ce9 '#:iter287' '#:iter287')))
       L92)
      (progn
       (assign
        (var
         VarBinding(L_LOC NameTranslation(0x2cef '#:form-sym291' '#:form-sym291')))
        (var
         VarBinding(L_LOC NameTranslation(0x2cea '#:destruct-sym290' '#:destruct-sym290'))))
       (assign
        (var VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))
        (constant nil))
       (assign
        (var VarBinding(L_LOC NameTranslation(0x2cf1 'A' 'A')))
        (constant nil))
       (unpack
        (var
         VarBinding(L_LOC NameTranslation(0x2cef '#:form-sym291' '#:form-sym291')))
        (var VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))
        (var VarBinding(L_LOC NameTranslation(0x2cf1 'A' 'A'))))
       (if
        (var VarBinding(L_LOC NameTranslation(0x2cf1 'A' 'A')))
        (progn
         (assign
          (var
           VarBinding(L_LOC NameTranslation(0x2d1a 'term' 'term')))
          (if
           (var
            VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))
           ('call'
            (var
             VarBinding(L_GLOBAL NameTranslation(0x2cfd 'backq-list*' 'backq-list*')))
            [(constant symbol(multiply))
             (var
              VarBinding(L_LOC NameTranslation(0x2cf1 'A' 'A')))
             ('call'
              (var
               VarBinding(L_GLOBAL NameTranslation(0x2cff 'backq-list' 'backq-list')))
              [(if
                (==
                 (var
                  VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))
                 (constant 1))
                (constant symbol(x))
                (if
                 (==
                  (var
                   VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))
                  (constant 2))
                 (constant (multiply x x))
                 (if
                  (constant True)
                  ('call'
                   (var
                    VarBinding(L_GLOBAL NameTranslation(0x2d15 'backq-list*' 'backq-list*')))
                   [(constant symbol(power))
                    (constant symbol(x))
                    ('call'
                     (var
                      VarBinding(L_GLOBAL NameTranslation(0x2d17 'backq-list' 'backq-list')))
                     [(var
                       VarBinding(L_LOC NameTranslation(0x2cf0 'n' 'n')))]
                     {}
                     None
                     None)]
                   {}
                   None
                   None)
                  (constant nil))))]
              {}
              None
              None)]
            {}
            None
            None)
           (var
            VarBinding(L_LOC NameTranslation(0x2cf1 'A' 'A')))))
         (assign
          (var
           VarBinding(L_LOC NameTranslation(0x2ce4 'acc' 'acc')))
          (if
           (var
            VarBinding(L_LOC NameTranslation(0x2ce4 'acc' 'acc')))
           ('call'
            (var
             VarBinding(L_GLOBAL NameTranslation(0x2d20 'backq-list*' 'backq-list*')))
            [(constant symbol(add))
             (var
              VarBinding(L_LOC NameTranslation(0x2ce4 'acc' 'acc')))
             ('call'
              (var
               VarBinding(L_GLOBAL NameTranslation(0x2d22 'backq-list' 'backq-list')))
              [(var
                VarBinding(L_LOC NameTranslation(0x2d1a 'term' 'term')))]
              {}
              None
              None)]
            {}
            None
            None)
           (var
            VarBinding(L_LOC NameTranslation(0x2d1a 'term' 'term'))))))
        (constant nil)))
      (goto L91)))
    (tag L95 (progn)))
   (var VarBinding(L_LOC NameTranslation(0x2d25 'acc' None))))))


"
 25           0 LOAD_CONST               1 (nil)
              3 STORE_FAST               1 (acc)

 26           6 LOAD_FAST                0 (poly)
              9 LOAD_ATTR                0 (terms)
             12 LOAD_ATTR                1 (iteritems)
             15 CALL_FUNCTION            0
             18 GET_ITER            
             19 STORE_FAST               2 (#:iter287)
             22 LOAD_CONST               1 (nil)
             25 STORE_FAST               3 (#:destruct-sym290)
        >>   28 LOAD_FAST                2 (#:iter287)
             31 FOR_ITER               196 (to 230)
             34 STORE_FAST               3 (#:destruct-sym290)
             37 POP_TOP             
             38 LOAD_FAST                3 (#:destruct-sym290)
             41 STORE_FAST               4 (#:form-sym291)
             44 LOAD_CONST               1 (nil)
             47 STORE_FAST               5 (n)
             50 LOAD_CONST               1 (nil)
             53 STORE_FAST               6 (A)
             56 LOAD_FAST                4 (#:form-sym291)
             59 UNPACK_SEQUENCE          2
             62 STORE_FAST               5 (n)
             65 STORE_FAST               6 (A)

 27          68 LOAD_FAST                6 (A)
             71 JUMP_IF_FALSE          152 (to 226)
             74 POP_TOP             

 28          75 LOAD_FAST                5 (n)
             78 JUMP_IF_FALSE           97 (to 178)
             81 POP_TOP             

 29          82 LOAD_GLOBAL              2 (backq-list*)
             85 LOAD_CONST               2 (symbol(multiply))
             88 LOAD_FAST                6 (A)
             91 LOAD_GLOBAL              3 (backq-list)

 31          94 LOAD_FAST                5 (n)
             97 LOAD_CONST               3 (1)
            100 COMPARE_OP               2 (==)
            103 JUMP_IF_FALSE            7 (to 113)
            106 POP_TOP             
            107 LOAD_CONST               4 (symbol(x))
            110 JUMP_FORWARD            56 (to 169)
        >>  113 POP_TOP             

 35         114 LOAD_FAST                5 (n)
            117 LOAD_CONST               5 (2)
            120 COMPARE_OP               2 (==)
            123 JUMP_IF_FALSE            7 (to 133)
            126 POP_TOP             
            127 LOAD_CONST               6 ((multiply x x))
            130 JUMP_FORWARD            36 (to 169)
        >>  133 POP_TOP             
            134 LOAD_CONST               7 (True)
            137 JUMP_IF_FALSE           25 (to 165)
            140 POP_TOP             

 36         141 LOAD_GLOBAL              2 (backq-list*)
            144 LOAD_CONST               8 (symbol(power))
            147 LOAD_CONST               4 (symbol(x))
            150 LOAD_GLOBAL              3 (backq-list)
            153 LOAD_FAST                5 (n)
            156 CALL_FUNCTION            1
            159 CALL_FUNCTION            3
            162 JUMP_FORWARD             4 (to 169)
        >>  165 POP_TOP             
            166 LOAD_CONST               1 (nil)
        >>  169 CALL_FUNCTION            1
            172 CALL_FUNCTION            3
            175 JUMP_FORWARD             4 (to 182)
        >>  178 POP_TOP             
            179 LOAD_FAST                6 (A)
        >>  182 STORE_FAST               7 (term)

 38         185 LOAD_FAST                1 (acc)
            188 JUMP_IF_FALSE           25 (to 216)
            191 POP_TOP             

 39         192 LOAD_GLOBAL              2 (backq-list*)
            195 LOAD_CONST               9 (symbol(add))
            198 LOAD_FAST                1 (acc)
            201 LOAD_GLOBAL              3 (backq-list)
            204 LOAD_FAST                7 (term)
            207 CALL_FUNCTION            1
            210 CALL_FUNCTION            3
            213 JUMP_FORWARD             4 (to 220)
        >>  216 POP_TOP             
            217 LOAD_FAST                7 (term)
        >>  220 STORE_FAST               1 (acc)
            223 JUMP_FORWARD             1 (to 227)
        >>  226 POP_TOP             
        >>  227 JUMP_ABSOLUTE           28
        >>  230 LOAD_FAST                1 (acc)
            233 RETURN_VALUE        

"
